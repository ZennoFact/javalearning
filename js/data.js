var d0 = "<h2>使い方</h2><br>これはJavaの学習用コンテンツです。<br>正規の授業資料ではありませんが，皆さんの理解を深める助けになればと思い，自作しました。<br>評判が良ければコンテンツの拡充も視野に入れますので，是非ご意見をお聞かせください。<br><br>このコンテンツは穴埋めの問題を皆さんに解いてもらいます。<br>入力するべきところは赤くなっています，入力をして，正しい答えとなれば，その回答欄は緑になります。ただし，間違った回答をした場合は回答欄は赤のままです。<br>是非，すべての回答欄が緑になるように頑張ってください。";
var c0 = "// 問題のサンプルです<br><br>// 回答できていない場所や間違えている場所は赤くなります。<br>String hello = <%b>;<br>// 回答が正しい場合は，表示が緑になります。<br>String world = <%b>;<br><br>// すべての回答欄が緑になるとクリアです。<br>System.out.println( <%b> + \" \" + <%b> );";
var a0 = ['"hello"', '"world!"', 'hello', 'world'];
var d1 = "<h2>変数</h2><br>プログラムにおいて初歩の初歩となるのはデータの扱いと出力です。<br><br>データの取り扱いは，名前がないとどのデータを指すのか分からなくなるので，名前を付けて管理します。<br>人間も普段の生活で「○○さんと遊んだ」とか，「彼の家に行った」など，固有名詞と人称代名詞などを使用して，何に対して何をする（した）のかをはっきりさせますね。それと同じです。<br><br>プログラムではデータの入れ物（箱のようなイメージ）を作り，その箱に名前を付けて，データを入れたり中身を見たりします。<br><br>データの入れ物を「変数」といいます。変数を作ることを「宣言する」といいます。これはプログラミング用語ですがしっかりと覚えてください。<br>また，データの入れ物の中にデータを入れることを「代入する」といいます。<br>データの入れ物の中身を見ることを「参照する」といいます。<br><br>では，まずは変数を宣言し，データを代入し，作った変数の中身を出力するプログラムを作成してみましょう。<br><br>データの出力は「System.out.println(変数)」という記述になります。";
var c1 = "public class Sample {<br>\\tpublic static void main(String[] args) {<br>\\t\\t// 変数numberを宣言しましょう。<br>\\t\\tint <%b>;<br>\\t\\t// 変数numberに「5」を代入しましょう。<br>\\t\\tnumber = <%b>;<br><br>\\t\\t// 変数は宣言と同時に，初期化することができます。<br>\\t\\t// 変数ageに20を代入して初期化しましょう。<br>\\t\\tint <%b> = <%b>;<br><br>\\t\\t// 変数の値はそのまま出力することができます。<br>\\t\\t// 変数ageを出力してみましょう。<br>\\t\\tSystem.out.println(<%b>);<br><br>\\t\\t// 変数nameを宣言し，「山田太郎」を代入して初期化しましょう。<br>\\t\\tString <%b> = \"山田太郎\";<br>\\t\\t// 変数nameを出力してみましょう。<br>\\t\\t<%b>.<%b>.<%b>(<%b>);<br>\\t}<br>}";
var a1 = ['number', '5', 'age', '20', 'age', 'name', 'System', 'out', 'println', 'name'];
var d2 = "<h2>変数と型と四則演算</h2><br>さて，皆さんが変数の宣言と代入をすることができるようになったところで，そのデータの利用法を学んでいきましょう。<br><br>まず，データを保存できる変数には種類が存在します。先ほどのコード内で変数名の前にあった言葉が変数の種類を表す言葉です。この言葉は多くの種類があります。その中の基本のものだけまずは学んでいきましょう。<br>基本のデータは以下の種類です。<br><ul><br><li>byte: 8ビット整数 -128~127</li><br><li>short : 16ビット整数 -32768~32767</li><br><li>int : 32ビット整数 -2147483648～2147483647</li><br><li>long : 64ビット整数 -9223372036854775808～9223372036854775807</li><br><li>float : 32ビット単精度浮動小数点数</li><br><li>double : 64ビット倍精度浮動小数点数</li><br><li>boolean : true / false</li><br><li>char : 16ビットUnicode文字 ¥u0000～¥uFFFF</li><br></ul><br>数値のデータはその保存できるサイズが決まっています。そのサイズによって箱のサイズが違うということです。自分の必要な荷物の量に合わせて鞄を選ぶような感じです。<br>大きな箱は荷物はいっぱい入りますが，その分場所も取るので気を付けましょう。<br>通常は，intとfloat，doubleを使い分ける程度でよいかと思います。<br><br>booleanは真偽値を表す型です。true（真）とfalse（偽）の2つしかありません。ニュアンス的にはYesとNoという感じです。<br><br>charは文字型です。Javaでは文字と文字列は異なります。文字は'a'や'愛'など，一文字のものです。文字列は\"I learn Java.\"や\"プログラミングは楽しい\"などの複数の文字で形成されるものになります。<br>また，文字列は基本データ型とは違う，String型というものです。これに関しては，後々しかるべきタイミングでお伝えしようと思いますので。お楽しみに。<br><br>さて，今回はデータの中で，数値を使った計算を行いたいと思います。<br>といっても，私たちの普段使う計算方法と変わりません。使う記号が少し違うところもありますが，難しいことはないと思います。<br><ul><br><li>+ : 2つの数値で足し算をした値を返す</li><br><li>- : 2つの数値で引き算をした値を返す</li><br><li>* : 2つの数値で掛け算をした値を返す</li><br><li>/ : 2つの数値で割り算をした値を返す</li><br><li>% : 2つの数値で割り算をした時の余りの値を返す</li><br></ul><br>余りの値を返すという計算は少し慣れないところもあるかもしれませんが，そこは慣れていくしかありません。頑張っていきましょう。";
var c2 = "public class Sample {<br>\\tpublic static void main(String[] args) {<br>\\t\\t// 変数に各種データを代入してみましょう。<br>\\t\\t// int型の変数numberに「3」を代入しましょう。<br>\\t\\t<%b> number = 3;<br>\\t\\t// double型の変数piに「3.14」を代入しましょう。<br>\\t\\t<%b> pi = <%b>;<br>\\t\\t// char型の変数alphabetに「'a'」を代入しましょう。<br>\\t\\t<%b> alphabet = <%b>;<br>\\t\\t// boolean型の変数isCodingに「true」を代入しましょう。<br>\\t\\t<%b> <%b> = <%b>;<br>\\t\\t// その他の変数の型に関しても，各自Eclipseなどを使用して試してみてください。<br><br>\\t\\t// 数字のデータは計算することができます。<br>\\t\\t// 変数resultを宣言し，「5 + 3」を代入して初期化しましょう。<br>\\t\\tint result = <%b> + <%b>; // 計算がされ，8が代入されます。<br>\\t\\t// 変数resultに対して，「5 - 8」を代入しましょう。<br>\\t\\tresult = 5 <%b> 8; // resultの値は「-3」に変更されます。<br>\\t\\t// 掛け算に使う記号はプログラムでは<br>\\t\\t// 変数resultに対して，「5 * 2」を代入しましょう。<br>\\t\\tresult = <%b> <%b> <%b>; // resultの値は「10」に変更されます。<br>\\t\\t// 変数resultに対して，「4 / 2」を代入しましょう。<br>\\t\\t<%b> = <%b> <%b> <%b>; // resultの値は「2」に変更されます。<br>\\t\\t// 変数resultに対して，「3 % 2」を代入しましょう。<br>\\t\\tresult = <%b> <%b> <%b>; // resultの値は「1」に変更されます。<br><br>\\t\\t// 計算は変数に対して行うこともできます。<br>\\t\\t// 変数resultに1を足して，変数ｒｅｓｕｌｔに代入しましょう。<br>\\t\\t<%b> = <%b> + <%b>; // resultは1だったので，「result + 1」は「2」になります。<br>\\t\\t// 同様のことを「+=」という演算子で行うことができます。使い方は，「変数 += 値」です。<br>\\t\\tresult <%b> <%b>; // resultは2だったので，resultの値は「3」になります。<br>\\t\\t// なお，足し算以外の計算にも上記の方法は使えます。各自Eclipseなどを使用して試してみてください。<br>\\t}<br>}<br>";
var a2 = ['int', 'double', '3.14', 'char', '\'a\'', 'boolean', 'isCoding', 'true', '5', '3', '-', '5', '*', '2', 'result', '4', '/', '2', '3', '%', '2', 'result', 'result', '1', '+=', '1'];
var d3 = "";
var c3 = "";
var a3 = [];
var d4 = "<h2>Scannerと文字列連結</h2><br>さて，プログラミングの第一歩を終えたところで考えなければいけないことがあります。<br><br>確かに世の中には起動すると自動的に決められた処理を行い，終了するプログラムも存在しますが，皆さんが通常触れているプログラムはそんなことはありませんね。きっと，ユーザー（みなさん）の入力や捜査に応じて様々な動きをしてくれるはずです。<br>そこで，今回は文字列を入力するプログラムの作成を行いたいと思います。<br><br>利用するのはScannerというアイテムです。アイテムのことはJavaではクラスといいます。そして，クラスは使用するときに自分で作らなければいけません。作り方はnewというキーワードを使用します。<br>使い方は，<br>Scanner 変数名 = new Scanner(System.in);<br>という使い方です。<br><br>アイテムには複数の使い方があります。これをメソッド（機能）といいます。1つのアイテムには複数のメソッドというものがあります。要するに，アイテムの機能を必要な時に必要なだけ使えるということです。<br>今回は，Scannerクラスのアイテム（インスタンスといいます）を使用する方法を学びます。<br><br>また，「+」記号を使用して，文字列を連結できるということを学びます。<br>";
var c4 = "";
var a4 = [];
var d5 = "";
var c5 = "";
var a5 = [];
var d6 = "";
var c6 = "";
var a6 = [];
var d7 = "";
var c7 = "";
var a7 = [];
var d8 = "";
var c8 = "";
var a8 = [];
var d9 = "";
var c9 = "";
var a9 = [];
var d10 = "";
var c10 = "";
var a10 = [];
var d11 = "";
var c11 = "";
var a11 = [];

var data = {
    0: {
        description: d0,
        code: c0,
        answer: a0
    },
    1: {
        description: d1,
        code: c1,
        answer: a1
    },
    2: {
        description: d2,
        code: c2,
        answer: a2
    },
    3: {
        description: d3,
        code: c3,
        answer: a3
    },
    4: {
        description: d4,
        code: c4,
        answer: a4
    },
    5: {
        description: d5,
        code: c5,
        answer: a5
    },
    6: {
        description: d6,
        code: c6,
        answer: a6
    },
    7: {
        description: d7,
        code: c7,
        answer: a7
    },
    8: {
        description: d8,
        code: c8,
        answer: a8
    },
    9: {
        description: d9,
        code: c9,
        answer: a9
    },
    10: {
        description: d10,
        code: c10,
        answer: a10
    },
    11: {
        description: d11,
        code: c11,
        answer: a11
    }
}

